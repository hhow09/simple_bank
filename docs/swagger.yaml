basePath: /
definitions:
  api.CreateAccountRequest:
    properties:
      currency:
        type: string
    required:
    - currency
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
        type: object
    type: object
  api.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      password_changed_at:
        type: string
      username:
        type: string
    type: object
  db.Account:
    properties:
      balance:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      id:
        type: integer
      owner:
        type: string
    type: object
  db.Entry:
    properties:
      account_id:
        type: integer
      amount:
        description: can be negative or positive
        type: integer
      created_at:
        type: string
      id:
        type: integer
    type: object
  db.Transfer:
    properties:
      amount:
        description: must be positive
        type: integer
      created_at:
        type: string
      from_account_id:
        type: integer
      id:
        type: integer
      to_account_id:
        type: integer
    type: object
  db.TransferTxResult:
    properties:
      from_account:
        $ref: '#/definitions/db.Account'
        type: object
      from_entry:
        $ref: '#/definitions/db.Entry'
        type: object
      to_account:
        $ref: '#/definitions/db.Account'
        type: object
      to_entry:
        $ref: '#/definitions/db.Entry'
        type: object
      transfer:
        $ref: '#/definitions/db.Transfer'
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: hhow09@gmail.com
    name: API Support
    url: https://github.com/hhow09/simple_bank/issues
  description: A simple bank service.
  license: {}
  title: Simple Bank API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: list account under current user
      parameters:
      - description: page id minimum(1)
        in: query
        name: page_id
        required: true
        type: integer
      - description: page minimum(5) maximum(10)
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - authorization: []
      summary: list Account
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: create account by a already-login user
      parameters:
      - description: currency
        in: body
        name: currency
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CreateAccountRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - authorization: []
      summary: Create Account
      tags:
      - accounts
  /accounts/:id:
    get:
      consumes:
      - application/json
      description: get account by account id
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - authorization: []
      summary: get Account
      tags:
      - accounts
  /transfers:
    post:
      consumes:
      - application/json
      description: Create transfer from from_account_id to to_account_id which has
        same currency
      parameters:
      - description: from_account_id
        in: body
        name: from_account_id
        required: true
        schema:
          type: integer
      - description: to_account_id
        in: body
        name: to_account_id
        required: true
        schema:
          type: integer
      - description: amount
        in: body
        name: amount
        required: true
        schema:
          type: integer
      - description: currency
        in: body
        name: currency
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TransferTxResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - authorization: []
      summary: Create Transfer
      tags:
      - transfers
  /users:
    post:
      consumes:
      - application/json
      description: Create User by json user params
      parameters:
      - description: user name
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: passward minLength(6)
        in: body
        minLength: 6
        name: password
        required: true
        schema:
          type: string
      - description: full name
        in: body
        name: fullname
        required: true
        schema:
          type: string
      - description: email
        in: body
        name: email
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a User
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: user name
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: passward minLength(6)
        in: body
        minLength: 6
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: User Login
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
  authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
